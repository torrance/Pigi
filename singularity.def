# Singularity definition file
# Build: singularity build --fakeroot --build-arg platform=nvidia|amd singularity.sif singularity.def
bootstrap: docker
From: ubuntu:22.04
# From: quay.io/pawsey/mpich-base:4.1.2_ubuntu23.04

%environment

export LD_LIBRARY_PATH="/opt/rocm/lib:$LD_LIBRARY_PATH"
export HIP_PLATFORM={{ platform }}

%post

export DEBIAN_FRONTEND=noninteractive

# Either: nvidia|amd
export HIP_PLATFORM={{ platform }}

# Install build/runtime dependencies
apt update && apt upgrade -y
apt install -y \
    wget \
    curl \
    unzip \
    git \
    flex \
    bison \
    libhdf5-dev \
    libgsl-dev \
    libfftw3-dev \
    libcfitsio-dev \
    libreadline-dev \
    libncurses-dev \
    wcslib-dev \
    build-essential \
    cmake \
    libblas-dev \
    liblapack-dev \
    libboost-all-dev \
    locales

# Set locale
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG=en_US.UTF-8

# Install Catch2
cd $HOME
git clone -b v3.8.1 https://github.com/catchorg/Catch2.git
mkdir -p Catch2/build
cd Catch2/build
cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..
make -j && make install

# Install fmt
cd $HOME
wget https://github.com/fmtlib/fmt/releases/download/10.2.0/fmt-10.2.0.zip && unzip fmt-10.2.0.zip
mkdir -p fmt-10.2.0/build && cd fmt-10.2.0/build
cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..
make -j && make install

# Install Rust
cd $HOME
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
. "$HOME/.cargo/env"

# Install mwa-hyperbeam
cd $HOME
git clone https://github.com/MWATelescope/mwa_hyperbeam.git
cd mwa_hyperbeam
cargo build --release
cp include/* /usr/local/include
cp target/release/*.so /usr/local/lib

# Download ephemerides casacore data
mkdir -p /usr/local/share/casacore/data
cd /usr/local/share/casacore/data
wget ftp://ftp.astron.nl/outgoing/Measures/WSRT_Measures.ztar
tar -xzf WSRT_Measures.ztar
rm WSRT_Measures.ztar

# Install casacore
# We currently require strictly > 3.5 for C++20 support
cd $HOME
git clone --branch v3.7.1 https://github.com/casacore/casacore
mkdir -p casacore/build
cd casacore/build
cmake -DDATA_DIR=/usr/local/share/casacore/data \
      -DUSE_OPENMP=OFF \
      -DUSE_HDF5=OFF \
      -DBUILD_PYTHON=OFF \
      -DBUILD_PYTHON3=OFF \
      -DUSE_THREADS=ON \
      -DCMAKE_INSTALL_PREFIX=/usr/local ..
make -j && make install -j

if [ "$HIP_PLATFORM" = "nvidia" ]; then
      # Install CUDA runtime
      cd $HOME
      wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
      dpkg -i cuda-keyring_1.1-1_all.deb
      apt update
      apt install -y cuda-toolkit

      # Install amdgpu-install dependencies
      apt install rsync libpopt0

      wget https://repo.radeon.com/amdgpu-install/6.2.4/ubuntu/jammy/amdgpu-install_6.2.60204-1_all.deb
      dpkg -i amdgpu-install_6.2.60204-1_all.deb
      apt update
      apt install -y hip-runtime-nvidia
      apt install -y hip-runtime-nvidia  # This is not a typo: run a second time

      # Install hipfft
      cd $HOME
      git clone -b release/rocm-rel-6.2 https://github.com/ROCm/hipFFT.git
      mkdir -p hipFFT/build && cd hipFFT/build
      HIP_PLATFORM=nvidia cmake -DCMAKE_CXX_COMPILER=g++ \
                              -DCMAKE_BUILD_TYPE=Release \
                              -DCMAKE_INSTALL_PREFIX=/usr/local \
                              -DBUILD_WITH_LIB=CUDA -L ..
      make -j && make install
fi

if [ "$HIP_PLATFORM" = "amd" ]; then
      # https://rocm.docs.amd.com/projects/HIP/en/latest/developer_guide/build.html
      # Limit version to 5.6 as random locks occur on 6.x
      # See: https://github.com/ROCm/hipFFT/issues/91

      # 5.6.1
      wget https://repo.radeon.com/amdgpu-install/5.6.1/ubuntu/jammy/amdgpu-install_5.6.50601-1_all.deb
      apt install -y ./amdgpu-install_5.6.50601-1_all.deb
      apt update && apt install -y rocm-hip-sdk
fi

# Clean up root
rm -rf /root/*
